{
  "_meta": {
    "created_at": 1757240612,
    "model": "gpt-4o-mini",
    "temperature": 0.0,
    "schema_version": "tasks_v1",
    "assignment_sha256": "9b6b899a1259b44bf57154da4047a7ed2be011bb455e552b379373be47ae9961",
    "source_file": "C:\\Users\\adans\\OneDrive\\שולחן העבודה\\Project\\python-submissions\\haifaintrotocs-semestera-24-25-hw4-Assignment-4-main\\README.md"
  },
  "tasks": [
    {
      "task_id": "task1",
      "description": "Implement a recursive function named `above_tail_average` that takes a linked list with a `value` field and a pointer to the next element. The function should delete any element whose value is less than the average of the elements to its right and return the updated list.",
      "expected_filename": "task1.py",
      "type": "programming",
      "lang": "python",
      "points": 10,
      "examples": "For the original list `1<-5<-2<-3<-1<-6<-8`, the list after the call will be `1<-5<-3<-6<-8`."
    },
    {
      "task_id": "task2",
      "description": "1. Write a function named `sort(lst)` that takes a doubly linked list and returns a pointer to the sorted list. 2. Write a function named `merge(lst1, lst2)` that takes two sorted linked lists and returns a pointer to the merged sorted list. 3. Bonus (5 points): Describe (in words) an algorithm for merge sort in O(n log(n)) time, including its time and space complexity, in the file task2.pdf.",
      "expected_filename": "task2.py",
      "type": "programming",
      "lang": "python",
      "points": 15,
      "examples": "For `lst1 = 1 -> 3 -> 5` and `lst2 = 4 -> 6 -> 7`, the function should return a pointer to `7 <- 6 <- 5 <- 4 <- 3 <- 1`."
    },
    {
      "task_id": "task3",
      "description": "1. Implement the function `find_single_element_linear(lst)` that takes a list of integers of size `2n+1` and returns the value that appears only once. 2. Implement the function `find_single_element_log(lst)` that performs the same operation but with O(log(n)) time complexity. 3. (Optional) Implement the function `find_unique_element(lst, k)` that takes a list where every number appears `k` times except one number that appears `p < k` times and returns the element that appears only `p` times.",
      "expected_filename": "task3.py",
      "type": "programming",
      "lang": "python",
      "points": 20,
      "examples": "For the list `[3, 3, 2, 2, 1, 1, 0]`, it should return `0`. For the list `[6, 6, 6, 6, 5, 5, 5, 5, 9, 9, 9, 9, 3]` with `k=4`, it should return `3`."
    }
  ]
}